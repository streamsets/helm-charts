# Default values for Control Hub
image:
  repository: streamsets/control-hub
  tag: 3.17.2
  pullPolicy: IfNotPresent  # set this to Never if you wan't to use a locally built image
  pullSecret:  # set to a secret name containing any necessary private registry credentials
  dev: false   # set to true if deploying developer builds rather than production builds
security:
  asUser: 1100
  fsGroup: 1100
service:
  type: ClusterIP
  port: 18631
  adminPort: 18632
ingress:
  enabled: true
  proto: https
  # Used to create an Ingress record.
  domain: example.com
  host: streamsets
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # ingress.kubernetes.io/rewrite-target: /
    # kubernetes.io/ingress.allow-http: "true"
    # kubernetes.io/ingress.class: traefik
istio:
  # set to true to use configure Istio Gateway + VirtualService instead of Ingress
  # requires that the target namespace has automatic sidecar injection enabled
  enabled: false
  mTLS: PERMISSIVE

systemDataCollector:
  enabled: false
  image:
    repository: streamsets/datacollector
    tag: latest
    pullPolicy: IfNotPresent
  resources: {}
  nodeSelector: {}

##
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
nodeSelector: {}

##
## Control Hub Configuration
##
common:
  env: &COMMON_ENV
    DPM_JAVA_OPTS: "-Xms1g -Xmx2g"

deployments:
  - name: aio
    appsToStart: "security,messaging,jobrunner,topology,notification,sla,policy,pipelinestore,provisioning,scheduler,sdp_classification,reporting,timeseries"
    replicaCount: 1
    container:
      env:
        <<: *COMMON_ENV

appProto: http
apps:
  - name: security
    deployment: aio
  - name: pipelinestore
    deployment: aio
  - name: messaging
    deployment: aio
  - name: jobrunner
    deployment: aio
  - name: timeseries
    deployment: aio
  - name: topology
    deployment: aio
  - name: notification
    deployment: aio
  - name: sla
    deployment: aio
  - name: policy
    deployment: aio
  - name: provisioning
    deployment: aio
  - name: scheduler
    deployment: aio
  - name: sdp_classification
    deployment: aio
  - name: reporting
    deployment: aio

adminPassword:  # default is random password, for scaling and upgrades to work, this must be set explicitly
schInfluxUser: streamsets
schInfluxPassword:  # default is random password, for scaling and upgrades to work, this must be set explicitly

##
## MySQL chart configuration
##
mysql:
  enabled: true  # set to false if bringing your own database
  mysqlHost:  # default is <release-name>-mysql.svc.cluster.local
  mysqlPort: 3306
  mysqlRootUser: root
  mysqlRootPassword:  # default is random password, for scaling and upgrades to work, this must be set explicitly
  mysqlUser: streamsets
  mysqlPassword:  # default is random password, for scaling and upgrades to work, this must be set explicitly
  persistence:
    enabled: true
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
  configurationFiles:
    mysql_dpm.cnf: |-
      [mysqld]
      character-set-server=utf8
      collation-server=utf8_general_ci
      lower_case_table_names=0
  initializationFiles:
    create-schemas.sql: |-
      CREATE DATABASE IF NOT EXISTS security;
      CREATE DATABASE IF NOT EXISTS pipelinestore;
      CREATE DATABASE IF NOT EXISTS messaging;
      CREATE DATABASE IF NOT EXISTS jobrunner;
      CREATE DATABASE IF NOT EXISTS topology;
      CREATE DATABASE IF NOT EXISTS notification;
      CREATE DATABASE IF NOT EXISTS sla;
      CREATE DATABASE IF NOT EXISTS timeseries;
      CREATE DATABASE IF NOT EXISTS policy;
      CREATE DATABASE IF NOT EXISTS provisioning;
      CREATE DATABASE IF NOT EXISTS reporting;
      CREATE DATABASE IF NOT EXISTS scheduler;
      CREATE DATABASE IF NOT EXISTS sdp_classification;
  ssl:
    enabled: false
##
## InfluxDB chart configuration
##
influxdb:
  proto: http
  enabled: true
  image:
    tag: "1.3"
  persistence:
    enabled: true
    size: 8Gi
  config:
    reporting_disabled: true
    http:
      bind_address: 8086

ldap:
  enabled: false
  host:  # needs value
  port: 389
  userBaseDn:  # needs value
  groupBaseDn:  # needs value
  bindDn:  # needs value
  ids: OpenLDAP
  ldaps: false
  startTLS: false
  userObjectClass: inetOrgPerson
  userNameAttribute: uid
  userEmailAttribute: mail
  userFullNameAttribute: cn
  userFilter: "%s={user}"
  bindPassword: admin
  fetchGroups: true
  groupObjectClass: groupOfNames
  groupMemberAttribute: member
  groupNameAttribute: cn
  groupFullNameAttribute: description
  groupFilter: "%s={dn}"
