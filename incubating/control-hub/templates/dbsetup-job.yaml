{{- range $app := .Values.apps }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Release.Name}}-init-{{ $app.name | replace "_" "-" }}-db-{{ $.Values.image.tag | lower | replace "." "-" }}"
  labels:
    helm.sh/chart: {{ include "control-hub.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install, pre-upgrade
    "helm.sh/hook-weight": {{ $app.priority | quote }}
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: "{{ $.Release.Name }}-init-{{ $app.name | replace "_" "-" }}-db"
      labels:
        app.kubernetes.io/part-of: {{ include "control-hub.name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        helm.sh/chart: {{ include "control-hub.chart" $ }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      initContainers:
      - name: mysql-ready
        image: mysql
        env:
        - name: DB_USER
          value: "{{ $.Values.mysql.mysqlRootUser }}"
        {{- if $.Values.mysql.mysqlRootPassword }}
        - name: DB_PASSWORD
          value: "{{ $.Values.mysql.mysqlRootPassword }}"
        {{- else }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" $ }}
              key: mysql-root-password
        {{- end }}
        - name: DB_HOST
        {{- if $.Values.mysql.mysqlHost }}
          value: "{{ $.Values.mysql.mysqlHost }}"
        {{- else }}
          value: "{{ template "mysql.fullname" $ }}.{{ $.Release.Namespace }}.svc.cluster.local"
        {{- end}}
        - name: DB_PORT
          value: "{{ $.Values.mysql.mysqlPort }}"
        command: ['sh', '-c', 
              'i=5; until [ $i -eq 0 ] || mysql -w --connect-timeout=120 -s -N -h"${DB_HOST}" -P"${DB_PORT}" -u"${DB_USER}" -p"${DB_PASSWORD}" -e "SELECT USER()"; do sleep 3; i=$((i-1)); done']
      {{- if $.Values.image.pullSecret }}
      imagePullSecrets:
      - name: "{{ $.Values.image.pullSecret }}"
      {{- end }}
      containers:
      - name: post-install-db-setup
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        args: ["dpmcli", "{{ $app.name }}", "buildSchema", "-a", "--debug"]
        securityContext:
          runAsNonRoot: true
        env:
        - name: DB_USER
          value: "{{ $.Values.mysql.mysqlRootUser }}"
        {{- if $.Values.mysql.mysqlRootPassword }}
        - name: DB_PASSWORD
          value: "{{ $.Values.mysql.mysqlRootPassword }}"
        {{- else }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" $ }}
              key: mysql-root-password
        {{- end }}
        - name: DB_HOST
        {{- if $.Values.mysqlHost }}
          value: "{{ $.Values.mysqlHost }}"
        {{- else }}
          value: "{{ template "mysql.fullname" $ }}.{{ $.Release.Namespace }}.svc.cluster.local"
        {{- end}}
        - name: DB_PORT
          value: "{{ $.Values.mysql.mysqlPort }}"
        - name: DPM_CONF_DB_URL
          value: "{{ $.Values.influxdb.proto }}://{{ template "influxdb.fullname" $ }}.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.influxdb.config.http.bind_address }}"
        - name: DPM_CONF_DB_NAME
          value: "dpm"
        - name: DPM_CONF_DB_USER
          value: {{ $.Values.schInfluxUser }}
        - name: DPM_CONF_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "control-hub.fullname" $ }}"
              key: influxdb-password
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-influx-setup-user-{{ $.Values.image.tag | lower | replace "." "-" }}"
  labels:
    app.kubernetes.io/part-of: {{ include "control-hub.name" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    helm.sh/chart: {{ include "control-hub.chart" $ }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: "{{.Release.Name}}-influx-setup-user"
      labels:
        helm.sh/chart: {{ include "control-hub.chart" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/managed-by: {{ $.Release.Service }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-influx-setup
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        args:
          - "/bin/sh"
          - "-c"
          - |
             i=5;
             while [ $i -ne 0 ] && curl -v -m 10 -X POST \
                {{ .Values.influxdb.proto }}://{{ template "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:8086/query \
                --data-urlencode \
                "q=CREATE USER \"${INFLUXDB_USER}\" WITH PASSWORD '${INFLUXDB_PASSWORD}' WITH ALL PRIVILEGES"; do
                  sleep 3;
                  i=$((i-1));
             done
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: INFLUXDB_USER
          value: {{ .Values.schInfluxUser }}
        - name: INFLUXDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "control-hub.fullname" . }}
              key: influxdb-password
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-influx-setup-db-{{ $.Values.image.tag | lower | replace "." "-" }}"
  labels:
    helm.sh/chart: {{ include "control-hub.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: "{{.Release.Name}}-influx-setup-db"
      labels:
        helm.sh/chart: {{ include "control-hub.chart" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/managed-by: {{ $.Release.Service }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-influx-setup-db
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        args:
          - "/bin/sh"
          - "-c"
          - |
            i=5;
            while [ $i -ne 0 ] && curl -v -m 10 -u"${INFLUXDB_USER}:${INFLUXDB_PASSWORD}" -X POST {{ .Values.influxdb.proto }}://{{ template "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:8086/query \
             --data-urlencode \
             "q=CREATE DATABASE ${DB_NAME}"; do
               sleep 3;
               i=$((i-1));
            done
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: DB_NAME
          value: dpm
        - name: INFLUXDB_USER
          value: {{ .Values.schInfluxUser }}
        - name: INFLUXDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "control-hub.fullname" . }}
              key: influxdb-password

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-influx-setup-app-db-{{ $.Values.image.tag | lower | replace "." "-" }}"
  labels:
    helm.sh/chart: {{ include "control-hub.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: "{{.Release.Name}}-influx-setup-app-db"
      labels:
        helm.sh/chart: {{ include "control-hub.chart" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/managed-by: {{ $.Release.Service }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-influx-setup-app-db
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        args:
          - "/bin/sh"
          - "-c"
          - |
             i=5;
             while [ $i -ne 0 ] && curl -v -m 10 -u"${INFLUXDB_USER}:${INFLUXDB_PASSWORD}" -X POST {{ .Values.influxdb.proto }}://{{ template "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:8086/query \
             --data-urlencode \
             "q=CREATE DATABASE ${DB_NAME}"; do
               sleep 3;
               i=$((i-1));
             done
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: DB_NAME
          value: dpm_app
        - name: INFLUXDB_USER
          value: {{ .Values.schInfluxUser }}
        - name: INFLUXDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "control-hub.fullname" . }}
              key: influxdb-password
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{$.Release.Name}}-init-system-id-{{ $.Values.image.tag | lower | replace "." "-" }}"
  labels:
    helm.sh/chart: {{ include "control-hub.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: "{{$.Release.Name}}-init-system-id"
      labels:
        app.kubernetes.io/part-of: {{ include "control-hub.name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        helm.sh/chart: {{ include "control-hub.chart" $ }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      initContainers:
      - name: mysql-ready
        image: mysql
        env:
        - name: DB_USER
          value: "{{ $.Values.mysql.mysqlRootUser }}"
        {{- if $.Values.mysql.mysqlRootPassword }}
        - name: DB_PASSWORD
          value: "{{ $.Values.mysql.mysqlRootPassword }}"
        {{- else }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" $ }}
              key: mysql-root-password
        {{- end }}
        - name: DB_HOST
        {{- if $.Values.mysql.mysqlHost }}
          value: "{{ $.Values.mysql.mysqlHost }}"
        {{- else }}
          value: "{{ template "mysql.fullname" $ }}.{{ $.Release.Namespace }}.svc.cluster.local"
        {{- end}}
        - name: DB_PORT
          value: "{{ $.Values.mysql.mysqlPort }}"
        command: ['sh', '-c', 
              'i=5; until [ $i -eq 0 ] || mysql -w --connect-timeout=5 -s -N -h"${DB_HOST}" -P"${DB_PORT}" -u"${DB_USER}" -p"${DB_PASSWORD}" -e "SELECT * FROM security.APPLICATION_INFO"; do sleep 5; i=$((i-1)); done']
      {{- if $.Values.image.pullSecret }}
      imagePullSecrets:
      - name: "{{ $.Values.image.pullSecret }}"
      {{- end }}
      containers:
      - name: post-install-db-setup
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        {{- if $.Values.image.dev }}
        args: ["dpmcli", "security", "activationKey", "--dev"]
        {{ else }}
        args: ["dpmcli", "security", "systemId", "-c"]
        {{- end }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: DPM_CONF_APPS_TO_START
          value: "security"
        - name: DB_USER
          value: "{{ $.Values.mysql.mysqlRootUser }}"
        {{- if $.Values.mysql.mysqlRootPassword }}
        - name: DB_PASSWORD
          value: "{{ $.Values.mysql.mysqlRootPassword }}"
        {{- else }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" $ }}
              key: mysql-root-password
        {{- end }}
        - name: DB_HOST
        {{- if $.Values.mysql.mysqlHost }}
          value: "{{ $.Values.mysql.mysqlHost }}"
        {{- else }}
          value: "{{ template "mysql.fullname" $ }}.{{ $.Release.Namespace }}.svc.cluster.local"
        {{- end}}
        - name: DB_PORT
          value: "{{ $.Values.mysql.mysqlPort }}"
